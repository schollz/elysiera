// Generated by scripts/build_param.py
use std::sync::Arc;
use nih_plug::prelude::*;
use nih_plug_egui::EguiState;
use faust_types::{FaustDsp, ParamIndex};

use crate::editor;

#[derive(Params)]
pub struct ElysieraParams {
    #[persist = "editor-state"]
    pub editor_state: Arc<EguiState>,

    #[id = "mix"]
    pub mix: FloatParam,
    #[id = "pre_gain"]
    pub pre_gain: FloatParam,
    #[id = "post_gain"]
    pub post_gain: FloatParam,
    #[id = "low_decay"]
    pub low_decay: FloatParam,
    #[id = "lf_crossover"]
    pub lf_crossover: FloatParam,
    #[id = "mid_decay"]
    pub mid_decay: FloatParam,
    #[id = "hf_damping"]
    pub hf_damping: FloatParam,
    #[id = "reverb_delay"]
    pub reverb_delay: FloatParam,
    #[id = "reverb_mix"]
    pub reverb_mix: FloatParam,
    #[id = "delay"]
    pub delay: FloatParam,
    #[id = "feedback"]
    pub feedback: FloatParam,
    #[id = "lowpass"]
    pub lowpass: FloatParam,
    #[id = "lowpass_q"]
    pub lowpass_q: FloatParam,
    #[id = "highpass"]
    pub highpass: FloatParam,
    #[id = "highpass_q"]
    pub highpass_q: FloatParam,
    #[id = "pitch_a"]
    pub pitch_a: FloatParam,
    #[id = "pitch_a_mix"]
    pub pitch_a_mix: FloatParam,
    #[id = "pitch_b"]
    pub pitch_b: FloatParam,
    #[id = "pitch_b_mix"]
    pub pitch_b_mix: FloatParam,
    #[id = "pitch_mod_rate"]
    pub pitch_mod_rate: FloatParam,
    #[id = "pitch_mod_mix"]
    pub pitch_mod_mix: FloatParam,
    #[id = "volume_mod_rate"]
    pub volume_mod_rate: FloatParam,
    #[id = "volume_mod_mix"]
    pub volume_mod_mix: FloatParam,
}

impl Default for ElysieraParams {
    fn default() -> Self {
        Self {
            editor_state: editor::default_state(),

            mix: param_float("Mix", 0.5, 0.0, 1.0),
            pre_gain: param_float("Pre Gain", 0.0, -30.0, 10.0),
            post_gain: param_float("Post Gain", 0.0, -30.0, 10.0),
            low_decay: param_float("Low decay", 3.7, 1.0, 60.0),
            lf_crossover: param_float("LF Crossover", 440.0, 50.0, 1000.0),
            mid_decay: param_float("Mid Decay", 4.68, 1.0, 60.0),
            hf_damping: param_float("HF Damping", 8600.0, 1500.0, 0.49 * 44100.0),
            reverb_delay: param_float("Reverb Delay", 0.0, 0.0, 100.0),
            reverb_mix: param_float("Reverb Mix", 1.0, 0.0, 1.0),
            delay: param_float("Delay", 0.5, 0.0, 5.0),
            feedback: param_float("Feedback", 0.5, 0.0, 0.99),
            lowpass: param_float("Lowpass", 18000.0, 25.0, 22000.0),
            lowpass_q: param_float("Lowpass Q", 0.71, 0.1, 2.0),
            highpass: param_float("Highpass", 250.0, 25.0, 22000.0),
            highpass_q: param_float("Highpass Q", 0.71, 0.1, 2.0),
            pitch_a: param_float("Pitch A", 12.0, -12.0, 12.0),
            pitch_a_mix: param_float("Pitch A Mix", 0.6, 0.0, 1.0),
            pitch_b: param_float("Pitch B", 5.0, -12.0, 12.0),
            pitch_b_mix: param_float("Pitch B Mix", 0.6, 0.0, 1.0),
            pitch_mod_rate: param_float("Pitch Mod Rate", 3.1, 0.01, 10.0),
            pitch_mod_mix: param_float("Pitch Mod Mix", 1.0, 0.0, 1.0),
            volume_mod_rate: param_float("Volume Mod Rate", 3.1, 0.01, 10.0),
            volume_mod_mix: param_float("Volume Mod Mix", 1.0, 0.0, 1.0),
        }
    }
}

impl ElysieraParams {
    pub fn dsp_set_params(&self, dsp: &mut Box<crate::dsp::ElysieraDSP>) {
        dsp.set_param(MIX, self.mix.value());
        dsp.set_param(PRE_GAIN, self.pre_gain.value());
        dsp.set_param(POST_GAIN, self.post_gain.value());
        dsp.set_param(LOW_DECAY, self.low_decay.value());
        dsp.set_param(LF_CROSSOVER, self.lf_crossover.value());
        dsp.set_param(MID_DECAY, self.mid_decay.value());
        dsp.set_param(HF_DAMPING, self.hf_damping.value());
        dsp.set_param(REVERB_DELAY, self.reverb_delay.value());
        dsp.set_param(REVERB_MIX, self.reverb_mix.value());
        dsp.set_param(DELAY, self.delay.value());
        dsp.set_param(FEEDBACK, self.feedback.value());
        dsp.set_param(LOWPASS, self.lowpass.value());
        dsp.set_param(LOWPASS_Q, self.lowpass_q.value());
        dsp.set_param(HIGHPASS, self.highpass.value());
        dsp.set_param(HIGHPASS_Q, self.highpass_q.value());
        dsp.set_param(PITCH_A, self.pitch_a.value());
        dsp.set_param(PITCH_A_MIX, self.pitch_a_mix.value());
        dsp.set_param(PITCH_B, self.pitch_b.value());
        dsp.set_param(PITCH_B_MIX, self.pitch_b_mix.value());
        dsp.set_param(PITCH_MOD_RATE, self.pitch_mod_rate.value());
        dsp.set_param(PITCH_MOD_MIX, self.pitch_mod_mix.value());
        dsp.set_param(VOLUME_MOD_RATE, self.volume_mod_rate.value());
        dsp.set_param(VOLUME_MOD_MIX, self.volume_mod_mix.value());
    }
}

pub const MIX: ParamIndex = ParamIndex(0);
pub const PRE_GAIN: ParamIndex = ParamIndex(1);
pub const POST_GAIN: ParamIndex = ParamIndex(2);
pub const LOW_DECAY: ParamIndex = ParamIndex(3);
pub const LF_CROSSOVER: ParamIndex = ParamIndex(4);
pub const MID_DECAY: ParamIndex = ParamIndex(5);
pub const HF_DAMPING: ParamIndex = ParamIndex(6);
pub const REVERB_DELAY: ParamIndex = ParamIndex(7);
pub const REVERB_MIX: ParamIndex = ParamIndex(8);
pub const DELAY: ParamIndex = ParamIndex(9);
pub const FEEDBACK: ParamIndex = ParamIndex(10);
pub const LOWPASS: ParamIndex = ParamIndex(11);
pub const LOWPASS_Q: ParamIndex = ParamIndex(12);
pub const HIGHPASS: ParamIndex = ParamIndex(13);
pub const HIGHPASS_Q: ParamIndex = ParamIndex(14);
pub const PITCH_A: ParamIndex = ParamIndex(15);
pub const PITCH_A_MIX: ParamIndex = ParamIndex(16);
pub const PITCH_B: ParamIndex = ParamIndex(17);
pub const PITCH_B_MIX: ParamIndex = ParamIndex(18);
pub const PITCH_MOD_RATE: ParamIndex = ParamIndex(19);
pub const PITCH_MOD_MIX: ParamIndex = ParamIndex(20);
pub const VOLUME_MOD_RATE: ParamIndex = ParamIndex(21);
pub const VOLUME_MOD_MIX: ParamIndex = ParamIndex(22);

fn param_st(name: &'static str, default: f32, min: f32, max: f32) -> FloatParam {
    FloatParam::new(
        name,
        default,
        FloatRange::Linear {min, max},
    )
    .with_unit(" st")
    .with_smoother(SmoothingStyle::Linear(50.0))
    .with_value_to_string(formatters::v2s_f32_rounded(2))
}

fn param_q(name: &'static str, default: f32, min: f32, max: f32) -> FloatParam {
    FloatParam::new(
        name,
        default,
        FloatRange::Skewed {
            min,
            max,
            factor: FloatRange::skew_factor(-1.0),
        },
    )
    .with_smoother(SmoothingStyle::Logarithmic(100.0))
    .with_value_to_string(formatters::v2s_f32_rounded(2))
}

fn param_hz(name: &'static str, default: f32, min: f32, max: f32) -> FloatParam {
    FloatParam::new(
        name,
        default,
        FloatRange::Skewed {
            min,
            max,
            factor: FloatRange::skew_factor(-1.0),
        },
    )
    .with_smoother(SmoothingStyle::Logarithmic(100.0))
    .with_value_to_string(formatters::v2s_f32_hz_then_khz(0))
    .with_string_to_value(formatters::s2v_f32_hz_then_khz())
}

fn param_float(name: &'static str, default: f32, min: f32, max: f32) -> FloatParam {
    FloatParam::new(
        name,
        default,
        FloatRange::Linear {min, max},
    )
    .with_smoother(SmoothingStyle::Linear(50.0))
    .with_value_to_string(formatters::v2s_f32_rounded(2))
}

fn param_percentage(name: &'static str, default: f32, min: f32, max: f32) -> FloatParam {
    FloatParam::new(
        name,
        default,
        FloatRange::Linear {min, max},
    )
    .with_unit(" %")
    .with_smoother(SmoothingStyle::Linear(50.0))
    .with_value_to_string(formatters::v2s_f32_percentage(2))
    .with_string_to_value(formatters::s2v_f32_percentage())
}

fn param_s(name: &'static str, default: f32, min: f32, max: f32) -> FloatParam {
    FloatParam::new(
        name,
        default,
        FloatRange::Linear {min, max},
    )
    .with_unit(" s")
    .with_smoother(SmoothingStyle::Linear(50.0))
    .with_value_to_string(formatters::v2s_f32_rounded(3))
}

fn param_ms(name: &'static str, default: f32, min: f32, max: f32) -> FloatParam {
    FloatParam::new(
        name,
        default,
        FloatRange::Linear {min, max},
    )
    .with_unit(" ms")
    .with_smoother(SmoothingStyle::Linear(50.0))
    .with_value_to_string(formatters::v2s_f32_rounded(3))
}
